name: GeoterRA CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: read
  checks: write

jobs:
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: website/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd website
          npm ci

      - name: Lint frontend code
        run: |
          cd website
          npm run lint

      - name: Build frontend (test)
        run: |
          cd website
          npm run build

      - name: Validate Android build files
        run: |
          if [ -d "Android/Development" ]; then
            echo "✅ Android project structure is valid"
            if [ ! -f "Android/Development/build.gradle.kts" ]; then
              echo "❌ Android build.gradle.kts not found"
              exit 1
            fi
            if [ ! -f "Android/Development/app/build.gradle.kts" ]; then
              echo "❌ Android app build.gradle.kts not found"
              exit 1
            fi
          else
            echo "⚠️ Android directory not found"
          fi

      - name: Validate API structure
        run: |
          if [ -d "API" ]; then
            echo "✅ API directory exists"
            if [ ! -f "API/dbhandler.inc.php" ]; then
              echo "❌ Database handler not found"
              exit 1
            fi
          else
            echo "❌ API directory not found"
            exit 1
          fi

      - name: Validate database files
        run: |
          if [ -f "database/GeoterRA.sql" ]; then
            echo "✅ Database schema file exists"
          else
            echo "❌ Database schema file not found"
            exit 1
          fi

      - name: Comment PR status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(c => c.user.type === 'Bot' && c.body.includes('🔍 PR Validation Results'));
            const body = "🔍 **PR Validation Results**\n\n" +
              "**Frontend Build**: ✅ Passed\n" +
              "**Code Linting**: ✅ Passed\n\n" +
              "**Android Structure**: ✅ Validated\n" +
              "**API Structure**: ✅ Validated\n" +
              "**Database Schema**: ✅ Validated\n\n" +
              "This PR is ready for review and merge! 🚀";
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

**Frontend Build**: ✅ Passed
**Code Linting**: ✅ Passed  
**Android Structure**: ✅ Validated
**API Structure**: ✅ Validated
**Database Schema**: ✅ Validated

This PR is ready for review and merge! 🚀`;
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

  build-and-deploy:
    name: Prepare main (keep only API, database, website/dist, workflows) & Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Fetch headerWeb content
        run: |
          git fetch origin headerWeb:refs/remotes/origin/headerWeb || true
          mkdir -p /tmp/headerWeb-content
          git --work-tree=/tmp/headerWeb-content checkout origin/headerWeb -- . 2>/dev/null || true

      - name: Backup .git and workflow, clean repo, restore workflow
        run: |
          set -euxo pipefail

          # Backup .git and current deploy workflow
          TMP_BACKUP=$(mktemp -d)
          cp -r .git "$TMP_BACKUP"/
          mkdir -p "$TMP_BACKUP"/workflows
          if [ -f ".github/workflows/deploy.yml" ]; then
            cp .github/workflows/deploy.yml "$TMP_BACKUP"/workflows/deploy.yml
          fi

          # Remove all files from working tree (keep TMP_BACKUP)
          git rm -rf . || true
          rm -rf ./* .[^.]* .??* 2>/dev/null || true

          # Restore .git and (later) workflow file
          cp -r "$TMP_BACKUP"/.git ./
          mkdir -p .github/workflows
          if [ -f "$TMP_BACKUP"/workflows/deploy.yml ]; then
            cp "$TMP_BACKUP"/workflows/deploy.yml .github/workflows/deploy.yml
          fi

      - name: Copy API, database and website/dist from headerWeb
        run: |
          set -euxo pipefail
          HDR=/tmp/headerWeb-content

          # Copy API
          if [ -d "$HDR/API" ]; then
            cp -r "$HDR"/API ./API
            echo "✅ API copied"
          else
            echo "⚠️ API not found in headerWeb"
          fi

          # Copy database
          if [ -d "$HDR/database" ]; then
            cp -r "$HDR"/database ./database
            echo "✅ database copied"
          else
            echo "⚠️ database not found in headerWeb"
          fi

          # Copy website/dist into website/dist
          if [ -d "$HDR/website/dist" ]; then
            mkdir -p website
            cp -r "$HDR"/website/dist ./website/dist
            echo "✅ website/dist copied"
          else
            echo "⚠️ website/dist not found in headerWeb"
          fi

      - name: Commit and push minimal main
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          set -euxo pipefail
          git add -A
          if git diff --staged --quiet; then
            echo "📝 No changes to commit"
          else
            COMMIT_MSG="🥷 Sync minimal main from headerWeb - $(date -u +'%Y-%m-%d %H:%M:%S UTC') - SHA:${GITHUB_SHA:0:8}"
            git commit -m "$COMMIT_MSG" || true
            git push "https://${GH_PAT}@github.com/${{ github.repository }}.git" main
            echo "✅ main updated with minimal files"
          fi

      - name: Trigger server deployment
        run: |
          echo "🌐 Triggering server deployment..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            --max-time 30 \
            --retry 3 \
            --retry-delay 5 \
            http://163.178.171.105/pull.sh)
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "✅ Server deployment triggered successfully"
          else
            echo "⚠️ Server deployment trigger returned status: $HTTP_STATUS"
          fi

      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`main\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${GITHUB_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Final main contains:" >> $GITHUB_STEP_SUMMARY
          echo "- .github/workflows/deploy.yml" >> $GITHUB_STEP_SUMMARY
          echo "- API/" >> $GITHUB_STEP_SUMMARY
          echo "- database/" >> $GITHUB_STEP_SUMMARY
          echo "- website/dist/" >> $GITHUB_STEP_SUMMARY