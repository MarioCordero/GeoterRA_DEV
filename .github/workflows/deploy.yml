name: GeoterRA CI/CD Pipeline

on:
  # Validate PRs targeting main (e.g. headerWeb -> main)
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

  # Run deploy on push to main (after merge)
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read
  checks: write

jobs:
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: website/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd website
          npm ci

      - name: Lint frontend code
        run: |
          cd website
          npm run lint

      - name: Build frontend (test)
        run: |
          cd website
          npm run build

      - name: Validate Android build files
        run: |
          if [ -d "Android/Development" ]; then
            echo "✅ Android project structure is valid"
            if [ ! -f "Android/Development/build.gradle.kts" ]; then
              echo "❌ Android build.gradle.kts not found"
              exit 1
            fi
            if [ ! -f "Android/Development/app/build.gradle.kts" ]; then
              echo "❌ Android app build.gradle.kts not found"
              exit 1
            fi
            echo "✅ Android build files are present"
          else
            echo "⚠️ Android directory not found"
          fi

      - name: Validate API structure
        run: |
          if [ -d "API" ]; then
            echo "✅ API directory exists"
            if [ ! -f "API/dbhandler.inc.php" ]; then
              echo "❌ Database handler not found"
              exit 1
            fi
            echo "✅ API structure is valid"
          else
            echo "❌ API directory not found"
            exit 1
          fi

      - name: Validate database files
        run: |
          if [ -f "database/GeoterRA.sql" ]; then
            echo "✅ Database schema file exists"
          else
            echo "❌ Database schema file not found"
            exit 1
          fi

      - name: Comment PR status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(c => c.user.type === 'Bot' && c.body.includes('🔍 PR Validation Results'));
            const body = `🔍 **PR Validation Results**

**Frontend Build**: ✅ Passed
**Code Linting**: ✅ Passed  
**Android Structure**: ✅ Validated
**API Structure**: ✅ Validated
**Database Schema**: ✅ Validated

This PR is ready for review and merge! 🚀`;
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

  build-and-deploy:
    name: Build & Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: website/package-lock.json

      - name: Install dependencies
        run: |
          cd website
          npm ci

      - name: Build frontend for production
        run: |
          cd website
          npm run build

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://${GH_PAT}@github.com/MarioCordero/GeoterRA_DEV.git
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: Prepare production deployment
        run: |
          # Ensure we're on main and up-to-date
          git fetch origin main
          git checkout main
          git reset --hard origin/main

          # Ensure built frontend artifacts are present
          if [ -d "website/dist" ]; then
            echo "✅ Built frontend found at website/dist"
          else
            echo "❌ website/dist not found — build may have failed"
            exit 1
          fi

          # (Optional) copy or move files if your production layout differs
          # cp -r website/dist ./website/ || true

      - name: Commit and push to main (if needed)
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "📝 No changes to commit"
          else
            COMMIT_MSG="🚀 Production build on main - $(date -u +'%Y-%m-%d %H:%M:%S UTC') - SHA:${GITHUB_SHA:0:8}"
            git commit -m "$COMMIT_MSG"
            git push origin main
            echo "✅ Changes pushed to main"
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: Trigger server deployment
        run: |
          echo "🌐 Triggering server deployment..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            --max-time 30 \
            --retry 3 \
            --retry-delay 5 \
            http://163.178.171.105/pull.sh)
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "✅ Server deployment triggered successfully"
          else
            echo "⚠️ Server deployment trigger returned status: $HTTP_STATUS"
          fi

      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`main\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${GITHUB_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Components Deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Android Application" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ PHP REST API" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Database Schema" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ React Frontend (Built)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Documentation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Server Status:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Deployment trigger sent to production server" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🎉 Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY